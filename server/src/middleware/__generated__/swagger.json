{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"FirebaseFirestore.Timestamp": {
				"description": "A Timestamp represents a point in time independent of any time zone or\ncalendar, represented as seconds and fractions of seconds at nanosecond\nresolution in UTC Epoch time. It is encoded using the Proleptic Gregorian\nCalendar which extends the Gregorian calendar backwards to year one. It is\nencoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n\"smeared\" so that no leap second table is needed for interpretation. Range\nis from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.",
				"properties": {
					"seconds": {
						"type": "number",
						"format": "double",
						"description": "The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z."
					},
					"nanoseconds": {
						"type": "number",
						"format": "double",
						"description": "The non-negative fractions of a second at nanosecond resolution."
					}
				},
				"required": [
					"seconds",
					"nanoseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.stripe_id__": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Partial_UserAdditionalInfo_.stripe_id_": {
				"$ref": "#/components/schemas/Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.stripe_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"EditSelfRequestBody": {
				"properties": {
					"updatedInformation": {
						"$ref": "#/components/schemas/Omit_Partial_UserAdditionalInfo_.stripe_id_"
					}
				},
				"required": [
					"updatedInformation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommonResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeleteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserSignupResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"jwtToken": {
						"type": "string"
					},
					"uid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserAdditionalInfo.Exclude_keyofUserAdditionalInfo.stripe_id__": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserAdditionalInfo.stripe_id_": {
				"$ref": "#/components/schemas/Pick_UserAdditionalInfo.Exclude_keyofUserAdditionalInfo.stripe_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserSignupBody": {
				"properties": {
					"email": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/Omit_UserAdditionalInfo.stripe_id_"
					}
				},
				"required": [
					"email",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MembershipTypeValues": {
				"enum": [
					"uoa_student",
					"non_uoa_student",
					"returning_member",
					"new_non_student"
				],
				"type": "string"
			},
			"MembershipStripeProductResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"properties": {
								"originalPrice": {
									"type": "string"
								},
								"displayPrice": {
									"type": "string"
								},
								"discount": {
									"type": "boolean"
								},
								"description": {
									"type": "string"
								},
								"name": {
									"$ref": "#/components/schemas/MembershipTypeValues"
								},
								"productId": {
									"type": "string"
								}
							},
							"required": [
								"displayPrice",
								"discount",
								"name",
								"productId"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Checkout.Session.Status": {
				"type": "string",
				"enum": [
					"complete",
					"expired",
					"open"
				]
			},
			"stripe.Stripe.Metadata": {
				"description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"type": "string"
				}
			},
			"MembershipPaymentResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stripeClientSecret": {
						"type": "string"
					},
					"membershipType": {
						"$ref": "#/components/schemas/MembershipTypeValues"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserPaymentRequestModel": {
				"properties": {
					"membershipType": {
						"$ref": "#/components/schemas/MembershipTypeValues"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BookingPaymentResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stripeClientSecret": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserBookingRequestingModel": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AllUserBookingSlotsResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"dates": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AvailableDates": {
				"properties": {
					"availableSpaces": {
						"type": "number",
						"format": "double"
					},
					"maxBookings": {
						"type": "number",
						"format": "double"
					},
					"date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"availableSpaces",
					"maxBookings",
					"date",
					"id"
				],
				"type": "object"
			},
			"AvailableDatesResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/AvailableDates"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AvailableDatesRequestModel": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserAccountTypes": {
				"enum": [
					"admin",
					"member",
					"guest"
				],
				"type": "string"
			},
			"CombinedUserData": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					},
					"uid": {
						"type": "string",
						"description": "Firebase identifier of the user *data* based on the firestore document"
					},
					"dateJoined": {
						"type": "string",
						"description": "Formatted UTC date string of when the account was created"
					},
					"email": {
						"type": "string",
						"description": "The email the user uses to log in"
					},
					"membership": {
						"$ref": "#/components/schemas/UserAccountTypes",
						"description": "What type of account the user has"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements",
					"uid",
					"email",
					"membership"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UsersByDateRangeResponse": {
				"description": "Represents the response structure for fetching users by date range.",
				"properties": {
					"data": {
						"items": {
							"properties": {
								"users": {
									"items": {
										"$ref": "#/components/schemas/CombinedUserData"
									},
									"type": "array"
								},
								"date": {
									"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
								}
							},
							"required": [
								"users",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BookingsByDateRangeRequestModel": {
				"description": "Represents the structure of a request model for fetching bookings within a specific date range.",
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingSlotUpdateResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"updatedBookingSlots": {
						"items": {
							"properties": {
								"bookingSlotId": {
									"type": "string"
								},
								"date": {
									"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
								}
							},
							"required": [
								"bookingSlotId",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MakeDatesAvailableRequestBody": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"slots": {
						"type": "number",
						"format": "double",
						"maximum": 32,
						"minimum": 0
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_MakeDatesAvailableRequestBody.Exclude_keyofMakeDatesAvailableRequestBody.slots__": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_MakeDatesAvailableRequestBody.slots_": {
				"$ref": "#/components/schemas/Pick_MakeDatesAvailableRequestBody.Exclude_keyofMakeDatesAvailableRequestBody.slots__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"AllUsersResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"nextCursor": {
						"type": "string",
						"description": "Needed for firestore operations which do not support offset\nbased pagination\n\n**Will be undefined in case of last page**"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/CombinedUserData"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserAdditionalInfo": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/UserAdditionalInfo"
					}
				},
				"required": [
					"uid",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_UserAdditionalInfo_": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"EditUsersRequestBody": {
				"properties": {
					"users": {
						"items": {
							"properties": {
								"updatedInformation": {
									"$ref": "#/components/schemas/Partial_UserAdditionalInfo_"
								},
								"uid": {
									"type": "string"
								}
							},
							"required": [
								"updatedInformation",
								"uid"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DemoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "server",
		"version": "1.0.0",
		"contact": {}
	},
	"paths": {
		"/users/self": {
			"get": {
				"operationId": "GetSelf",
				"responses": {
					"200": {
						"description": "Fetched self data",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"stripe_id": {
											"type": "string"
										},
										"university_year": {
											"type": "string"
										},
										"student_id": {
											"type": "string"
										},
										"university": {
											"type": "string"
										},
										"faculty": {
											"type": "string"
										},
										"ethnicity": {
											"type": "string"
										},
										"dietary_requirements": {
											"type": "string"
										},
										"last_name": {
											"type": "string"
										},
										"first_name": {
											"type": "string"
										},
										"emergency_contact": {
											"type": "string"
										},
										"gender": {
											"type": "string"
										},
										"phone_number": {
											"type": "number",
											"format": "double"
										},
										"does_ski": {
											"type": "boolean"
										},
										"does_racing": {
											"type": "boolean"
										},
										"does_snowboarding": {
											"type": "boolean"
										},
										"date_of_birth": {
											"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
										},
										"uid": {
											"type": "string"
										}
									},
									"required": [
										"dietary_requirements",
										"last_name",
										"first_name",
										"phone_number",
										"date_of_birth",
										"uid"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/users/edit-self": {
			"patch": {
				"operationId": "EditSelf",
				"responses": {
					"200": {
						"description": "Successful edit"
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditSelfRequestBody"
							}
						}
					}
				}
			}
		},
		"/users/delete-user": {
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "Deleted user",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/CommonResponse"
										},
										{}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/webhook": {
			"post": {
				"operationId": "ReceiveWebhook",
				"responses": {
					"200": {
						"description": "Webhook post received"
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/signup": {
			"post": {
				"operationId": "Signup",
				"responses": {
					"200": {
						"description": "Signup successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserSignupResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserSignupBody"
							}
						}
					}
				}
			}
		},
		"/payment/membership_prices": {
			"get": {
				"operationId": "GetMembershipPrices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MembershipStripeProductResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/payment/checkout_status": {
			"get": {
				"operationId": "GetCheckoutSessionDetails",
				"responses": {
					"200": {
						"description": "Session Fetched",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"metadata": {
											"$ref": "#/components/schemas/stripe.Stripe.Metadata"
										},
										"pricePaid": {
											"type": "number",
											"format": "double"
										},
										"customer_email": {
											"type": "string"
										},
										"status": {
											"$ref": "#/components/schemas/stripe.Stripe.Checkout.Session.Status"
										}
									},
									"required": [
										"metadata",
										"pricePaid",
										"customer_email",
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "sessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/payment/membership": {
			"post": {
				"operationId": "GetMembershipPayment",
				"responses": {
					"200": {
						"description": "Session created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MembershipPaymentResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserPaymentRequestModel"
							}
						}
					}
				}
			}
		},
		"/payment/booking": {
			"post": {
				"operationId": "GetBookingPayment",
				"responses": {
					"200": {
						"description": "Created booking checkout session",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingPaymentResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserBookingRequestingModel"
							}
						}
					}
				}
			}
		},
		"/bookings": {
			"get": {
				"operationId": "GetAllBookings",
				"responses": {
					"200": {
						"description": "Found bookings",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AllUserBookingSlotsResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": []
			}
		},
		"/bookings/available-dates": {
			"post": {
				"operationId": "GetAvailableDates",
				"responses": {
					"200": {
						"description": "Availabilities found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AvailableDatesResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AvailableDatesRequestModel"
							}
						}
					}
				}
			}
		},
		"/bookings/fetch-users": {
			"post": {
				"operationId": "FetchUsersByBookingDateRange",
				"responses": {
					"200": {
						"description": "Users found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersByDateRangeResponse"
								}
							}
						}
					}
				},
				"description": "This method fetches users based on a booking date range.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BookingsByDateRangeRequestModel"
							}
						}
					}
				}
			}
		},
		"/admin/bookings/make-dates-available": {
			"post": {
				"operationId": "MakeDateAvailable",
				"responses": {
					"201": {
						"description": "Slot made available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingSlotUpdateResponse"
								}
							}
						}
					}
				},
				"description": "Booking Operations",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MakeDatesAvailableRequestBody"
							}
						}
					}
				}
			}
		},
		"/admin/bookings/make-dates-unavailable": {
			"post": {
				"operationId": "MakeDateUnavailable",
				"responses": {
					"201": {
						"description": "Slot made unavailable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingSlotUpdateResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_MakeDatesAvailableRequestBody.slots_"
							}
						}
					}
				}
			}
		},
		"/admin/users": {
			"get": {
				"operationId": "GetAllUsers",
				"responses": {
					"200": {
						"description": "Users found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AllUsersResponse"
								}
							}
						}
					}
				},
				"description": "User Operations",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "toFetch",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/admin/users/create": {
			"put": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "Created"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/admin/users/bulk-edit": {
			"patch": {
				"operationId": "EditUsers",
				"responses": {
					"200": {
						"description": "Edited"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditUsersRequestBody"
							}
						}
					}
				}
			}
		},
		"/admin/users/promote": {
			"put": {
				"operationId": "PromoteUser",
				"responses": {
					"200": {
						"description": "Promoted user"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromoteUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/admin/users/demote": {
			"put": {
				"operationId": "DemoteUser",
				"responses": {
					"200": {
						"description": "Demoted user"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DemoteUserRequestBody"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}