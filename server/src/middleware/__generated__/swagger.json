{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"FirebaseFirestore.Timestamp": {
				"description": "A Timestamp represents a point in time independent of any time zone or\ncalendar, represented as seconds and fractions of seconds at nanosecond\nresolution in UTC Epoch time. It is encoded using the Proleptic Gregorian\nCalendar which extends the Gregorian calendar backwards to year one. It is\nencoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n\"smeared\" so that no leap second table is needed for interpretation. Range\nis from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.",
				"properties": {
					"seconds": {
						"type": "number",
						"format": "double",
						"description": "The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z."
					},
					"nanoseconds": {
						"type": "number",
						"format": "double",
						"description": "The non-negative fractions of a second at nanosecond resolution."
					}
				},
				"required": [
					"seconds",
					"nanoseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserAdditionalInfo": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_freestyle": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"gender": {
						"type": "string"
					},
					"emergency_name": {
						"type": "string"
					},
					"emergency_phone": {
						"type": "string"
					},
					"emergency_relation": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"membership": {
						"type": "string",
						"enum": [
							"admin",
							"member",
							"guest"
						]
					},
					"dietary_requirements": {
						"type": "string"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"returning": {
						"type": "boolean"
					},
					"university_year": {
						"type": "string"
					}
				},
				"required": [
					"date_of_birth",
					"does_freestyle",
					"does_racing",
					"does_ski",
					"gender",
					"emergency_name",
					"emergency_phone",
					"emergency_relation",
					"first_name",
					"last_name",
					"membership",
					"dietary_requirements",
					"returning",
					"university_year"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FirebaseProperties": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/UserAdditionalInfo"
					},
					{
						"$ref": "#/components/schemas/FirebaseProperties"
					}
				]
			},
			"CreateUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/UserAdditionalInfo"
					}
				},
				"required": [
					"uid",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.membership__": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_freestyle": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"gender": {
						"type": "string"
					},
					"emergency_name": {
						"type": "string"
					},
					"emergency_phone": {
						"type": "string"
					},
					"emergency_relation": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"returning": {
						"type": "boolean"
					},
					"university_year": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Partial_UserAdditionalInfo_.membership_": {
				"$ref": "#/components/schemas/Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.membership__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"EditSelfRequestBody": {
				"properties": {
					"updatedInformation": {
						"$ref": "#/components/schemas/Omit_Partial_UserAdditionalInfo_.membership_"
					}
				},
				"required": [
					"updatedInformation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_UserAdditionalInfo_": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_freestyle": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"gender": {
						"type": "string"
					},
					"emergency_name": {
						"type": "string"
					},
					"emergency_phone": {
						"type": "string"
					},
					"emergency_relation": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"membership": {
						"type": "string",
						"enum": [
							"admin",
							"member",
							"guest"
						]
					},
					"dietary_requirements": {
						"type": "string"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"returning": {
						"type": "boolean"
					},
					"university_year": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"EditUsersRequestBody": {
				"properties": {
					"users": {
						"items": {
							"properties": {
								"updatedInformation": {
									"$ref": "#/components/schemas/Partial_UserAdditionalInfo_"
								},
								"uid": {
									"type": "string"
								}
							},
							"required": [
								"updatedInformation",
								"uid"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DemoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "server",
		"version": "1.0.0",
		"contact": {}
	},
	"paths": {
		"/users": {
			"get": {
				"operationId": "GetAllUsers",
				"responses": {
					"200": {
						"description": "Users found",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/self": {
			"get": {
				"operationId": "GetSelf",
				"responses": {
					"200": {
						"description": "Fetched self data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/users/create": {
			"put": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "Created"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/users/edit-self": {
			"patch": {
				"operationId": "EditSelf",
				"responses": {
					"200": {
						"description": "Successful edit"
					}
				},
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditSelfRequestBody"
							}
						}
					}
				}
			}
		},
		"/users/bulk-edit": {
			"patch": {
				"operationId": "EditUsers",
				"responses": {
					"200": {
						"description": "Edited"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditUsersRequestBody"
							}
						}
					}
				}
			}
		},
		"/users/promote": {
			"put": {
				"operationId": "PromoteUser",
				"responses": {
					"200": {
						"description": "Promoted user"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromoteUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/users/demote": {
			"put": {
				"operationId": "DemoteUser",
				"responses": {
					"200": {
						"description": "Demoted user"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DemoteUserRequestBody"
							}
						}
					}
				}
			}
		},
		"/webhook": {
			"post": {
				"operationId": "ReceiveWebhook",
				"responses": {
					"200": {
						"description": "Webhook post received"
					}
				},
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}